knitr::opts_chunk$set(echo = TRUE)
#libraries
library(tidyverse)
library(tidycensus)
library(janitor)
library(lubridate)
#install.packages("ipumsr")
library(ipumsr)
#establishing column names and search terms to use in each dataset
column_names <- c("committee_id", "amndt_ind", "report_year", "report_type", "image_number", "line_number", "form_tp_cd", "sched_tp_cd", "recipient_name", "recipient_city", "recipient_state", "zip_code", "disbursement_date", "disbursement_amount", "transaction_pgi", "disbursement_description", "category", "category_desc", "memo_cd", "memo_text", "entity_type", "sub_id", "file_num", "tran_id", "back_ref_tran_id")  # Add your column names here
#search_terms to use in the loops and in each dataset
search_terms <- c("FOOD", "BEVERAGE", "DINING", "MEAL", "CATERING", "DRINK", "EVENT")
#establishing and trying out things for the loop
dmv_foods_combined <- tibble()
# Define a list of years
cycles <- c('1112', '1314', '1516','1718','1920','2122','2324')
# Create a for loop to execute functions
for (cycle in cycles) {
# need to build the path to the .txt file
path <- paste0("~/Downloads/data", cycle,".txt")
print(path)
dmv_food <- read_delim(path, delim = "|", col_names = column_names)
dmv_food_filtered <- dmv_food %>%
filter(recipient_state == "DC"| recipient_state == "MD" | recipient_state == "VA") %>%
filter(entity_type != "IND") %>%
mutate(zip_code = str_sub(zip_code, start=1L, end=5L)) %>%
mutate(disbursement_date=mdy(disbursement_date)) %>%
filter(str_detect(disbursement_description, str_c(search_terms, collapse = "|")))
dmv_foods_combined <- bind_rows(dmv_foods_combined, dmv_food_filtered)
}
# fix the dates that havent happened yet and I can do that by looking at the image number on FEC.
# FOR OPEN REFINE I WANT A LIST OF UNIQUE RESTURANTS.
#RETAIN HOW IT ORIGINALLY APPEARS AND THEN MAKE A COPY OF THE COLUMN.
write_csv(dmv_foods_combined, "data/dmv_foods_combined.csv")
#What are the entity types
dmv_foods_combined %>%
group_by(entity_type) %>%
count()
#ORG has the most with 208,760 transactions. Need to see what types of places make up that entity_type column.
dmv_foods_combined %>%
filter(entity_type == "ORG") %>%
group_by(recipient_name) %>%
summarize(total = sum(disbursement_amount)) %>%
arrange(desc(total))
#This is showing that not many of the top recipients in the ORG category are actual food establishments
#Creating a column of the recipients to be cleaned in Open Refine
distinct_columns <- dmv_foods_combined %>%
distinct(recipient_name) %>%
mutate(cleaned_names = recipient_name)
write_csv(distinct_columns, "data/distinct_columns.csv")
#reading back the cleaned district columns
district_cols_cleaned <- read_csv("data/recipient_names_cleaned.csv")
district_cols_cleaned %>%
group_by(cleaned_names) %>%
count() %>%
arrange(n)
#Methodology: brought back the cleaned district columns after standardizing and clustering in open refine. I put a Y in a "exclude" column because those recipient names are not related to food or food establishments. One method of getting rid of those names was doing that. Another is joining the district_cols_cleaned dataframe back to dmv_foods_combined and then filtering out everything that is not an ORG entity_type
#Trying to see what type of places are in the other categories in Entity_type. This will help. determine more I should exclude in Google Sheets. From there, I can gather more key words to label Y when I exclude them later on.
dmv_foods_combined %>%
group_by(recipient_name, disbursement_description) %>%
filter(entity_type == "ORG") %>%
select(recipient_name, disbursement_description, entity_type)
# In addition to cleaning the names in sheets, I think a good way to find out what I need to exclude is by looking at the disbursement description. Because I don't want transactions that ahve to do with general committee stuff or meetings. I want places where they actually spend money on food.
#One thought I had would be to export the cleaned_nammes but put the disbursement_description next to it so we can see the reason for the transaction. I think this would help understand what was really used for a food expense and what was not. I commented out what I think the code should look like.
#names_and_descriptions <-
dmv_foods_combined %>%
distinct(recipient_name, disbursement_description) %>%
mutate(cleaned_names = recipient_name)
#group_by(recipient_name, disbursement_description) %>%
#select(recipient_name, disbursement_description)
View(dmv_foods_combined)
dmv_foods_combined %>%
filter(recipient_name == 'ZEST BISTRO')
dmv_foods_combined %>%
View(district_cols_cleaned)
View(distinct_columns)
View(district_cols_cleaned)
View(district_cols_cleaned)
View(distinct_columns)
distinct_columns <- dmv_foods_combined %>%
distinct(recipient_name) %>%
mutate(cleaned_names = recipient_name)
write_csv(distinct_columns, "data/distinct_columns.csv")
View(distinct_columns)
View(distinct_columns)
knitr::opts_chunk$set(echo = TRUE)
#libraries
library(tidyverse)
library(tidycensus)
library(janitor)
library(lubridate)
#install.packages("ipumsr")
library(ipumsr)
#names_and_descriptions <-
dmv_foods_combined %>%
distinct(recipient_name, disbursement_description) %>%
mutate(cleaned_names = recipient_name)
