select(-Notes)
dmv_foods_combined <- dmv_foods_combined %>%
inner_join(exclusions, by = "recipient_name")
#loading in exclusions
exclusions <- read_csv("data/cleaned_names_attempt_2.csv")
exclusions <- exclusions %>%
select(-Notes)
dmv_foods_combined <- dmv_foods_combined %>%
inner_join(exclusions, by = "recipient_name")
#libraries
library(tidyverse)
library(tidycensus)
library(janitor)
library(lubridate)
#install.packages("ipumsr")
library(ipumsr)
#establishing and trying out things for the loop
dmv_foods_combined <- tibble()
# Define a list of years
cycles <- c('1112', '1314', '1516','1718','1920','2122','2324')
# Create a for loop to execute functions
for (cycle in cycles) {
# need to build the path to the .txt file
path <- paste0("~/Downloads/data", cycle,".txt")
print(path)
dmv_food <- read_delim(path, delim = "|", col_names = column_names)
dmv_food_filtered <- dmv_food %>%
filter(recipient_state == "DC"| recipient_state == "MD" | recipient_state == "VA") %>%
filter(entity_type != "IND") %>%
mutate(zip_code = str_sub(zip_code, start=1L, end=5L)) %>%
mutate(disbursement_date=mdy(disbursement_date)) %>%
filter(str_detect(disbursement_description, str_c(search_terms, collapse = "|")))
dmv_foods_combined <- bind_rows(dmv_foods_combined, dmv_food_filtered)
}
# fix the dates that havent happened yet and I can do that by looking at the image number on FEC.
# FOR OPEN REFINE I WANT A LIST OF UNIQUE RESTURANTS.
#RETAIN HOW IT ORIGINALLY APPEARS AND THEN MAKE A COPY OF THE COLUMN.
write_csv(dmv_foods_combined, "data/dmv_foods_combined.csv")
#What are the entity types
dmv_foods_combined %>%
group_by(entity_type) %>%
count()
#ORG has the most with 208,760 transactions. Need to see what types of places make up that entity_type column.
dmv_foods_combined %>%
filter(entity_type == "ORG") %>%
group_by(recipient_name) %>%
summarize(total = sum(disbursement_amount)) %>%
arrange(desc(total))
#This is showing that not many of the top recipients in the ORG category are actual food establishments
#Creating a column of the recipients to be cleaned in Open Refine
distinct_columns <- dmv_foods_combined %>%
distinct(recipient_name) %>%
mutate(cleaned_names = recipient_name)
write_csv(distinct_columns, "data/distinct_columns.csv")
#reading back the cleaned district columns
district_cols_cleaned <- read_csv("data/recipient_names_cleaned.csv")
district_cols_cleaned %>%
group_by(cleaned_names) %>%
count() %>%
arrange(n)
#Methodology: brought back the cleaned district columns after standardizing and clustering in open refine. I put a Y in a "exclude" column because those recipient names are not related to food or food establishments. One method of getting rid of those names was doing that. Another is joining the district_cols_cleaned dataframe back to dmv_foods_combined and then filtering out everything that is not an ORG entity_type
#Trying to see what type of places are in the other categories in Entity_type. This will help. determine more I should exclude in Google Sheets. From there, I can gather more key words to label Y when I exclude them later on.
dmv_foods_combined %>%
group_by(recipient_name, disbursement_description) %>%
filter(entity_type == "ORG") %>%
select(recipient_name, disbursement_description, entity_type)
# In addition to cleaning the names in sheets, I think a good way to find out what I need to exclude is by looking at the disbursement description. Because I don't want transactions that ahve to do with general committee stuff or meetings. I want places where they actually spend money on food.
#One thought I had would be to export the cleaned_nammes but put the disbursement_description next to it so we can see the reason for the transaction. I think this would help understand what was really used for a food expense and what was not. I commented out what I think the code should look like.
names_and_descriptions <- dmv_foods_combined %>%
distinct(recipient_name, disbursement_description) %>%
mutate(cleaned_names = recipient_name)
#group_by(recipient_name, disbursement_description) %>%
#select(recipient_name, disbursement_description)
#loading in exclusions
exclusions <- read_csv("data/cleaned_names_attempt_2.csv")
exclusions <- exclusions %>%
select(-Notes)
view(exclusions)
#joining exclusions to dmv_foods_combined
dmv_foods_combined <- dmv_foods_combined %>%
inner_join(exclusions, by = "recipient_name")
dmv_foods_combined <- dmv_foods_combined %>%
mutate(exclude = case_when(is.na(exclude) ~ "n", TRUE ~ exclude))
# entries labeled n are ones we want to keep in our analysis
#removing exlcusions
dmv_foods_combined %>%
filter(exclude != "y") %>%
group_by(recipient_name, disbursement_description) %>%
mutate(new_exclude = exclude) %>%
select(recipient_name, disbursement_description, new_exclude)
#Produves 182,560 enteriers
#These are records to keep in our analysis
#names_and_descriptions already has distinct descriptions and recipient_names
names_and_descriptions %>%
inner_join(exclusions, by = "recipient_name") %>%
mutate(exclude = case_when(is.na(exclude) ~ "n", TRUE ~ exclude)) %>%
select(recipient_name, disbursement_description, cleaned_names.y, exclude)
#removing exlcusions
dmv_foods_combined %>%
filter(exclude != "y") %>%
group_by(recipient_name, disbursement_description) %>%
mutate(new_exclude = exclude) %>%
select(recipient_name, cleaned_names, disbursement_description, new_exclude)
#removing exlcusions
dmv_foods_combined %>%
filter(exclude != "y") %>%
group_by(recipient_name, disbursement_description) %>%
mutate(new_exclude = exclude) %>%
select(cleaned_names, disbursement_description, new_exclude)
#removing exlcusions
dmv_foods_combined %>%
filter(exclude != "y") %>%
group_by(disbursement_description) %>%
mutate(new_exclude = exclude) %>%
select(cleaned_names, disbursement_description, new_exclude)
dmv_foods_combined %>%
distinct(disbursement_description)
#removing exlcusions
dmv_foods_combined %>%
filter(exclude != "y") %>%
group_by(disbursement_description) %>%
mutate(new_exclude = exclude) %>%
select(cleaned_names, disbursement_description, new_exclude)
knitr::opts_chunk$set(echo = TRUE)
#removing exlcusions
dmv_foods_combined %>%
filter(exclude != "y") %>%
group_by(disbursement_description) %>%
mutate(new_exclude = exclude) %>%
select(cleaned_names, disbursement_description, new_exclude)
#libraries
library(tidyverse)
library(tidycensus)
library(janitor)
library(lubridate)
#install.packages("ipumsr")
library(ipumsr)
#removing exlcusions
dmv_foods_combined %>%
filter(exclude != "y") %>%
group_by(disbursement_description) %>%
mutate(new_exclude = exclude) %>%
select(cleaned_names, disbursement_description, new_exclude)
mv_foods_combined %>%
filter(exclude != "y") %>%
group_by(disbursement_description) %>%
mutate(new_exclude(is.na())) %>%
select(cleaned_names, disbursement_description, new_exclude)
#removing exlcusions
dmv_foods_combined %>%
filter(exclude != "y") %>%
group_by(disbursement_description) %>%
mutate(new_exclude = exclude) %>%
select(cleaned_names, disbursement_description, new_exclude)
#removing exlcusions
dmv_foods_combined %>%
filter(exclude != "y") %>%
group_by(cleaned_names, disbursement_description) %>%
mutate(new_exclude = exclude) %>%
select(cleaned_names, disbursement_description, new_exclude)
#removing exlcusions
dmv_foods_combined %>%
filter(exclude != "y") %>%
group_by(disbursement_description) %>%
mutate(new_exclude = exclude) %>%
select(cleaned_names, disbursement_description, new_exclude)
#removing exlcusions
dmv_foods_combined %>%
filter(exclude != "y") %>%
group_by(disbursement_description) %>%
mutate(new_exclude = exclude) %>%
select(disbursement_description, new_exclude)
dmv_foods_combined %>%
filter(exclude != "y") %>%
group_by(cleaned_names, disbursement_description) %>%
mutate(new_exclude = exclude)
View(names_and_descriptions)
names_and_descriptions <- dmv_foods_combined %>%
distinct(recipient_name, disbursement_description) %>%
inner_join(exclusions, by = "recipient_name")
names_and_descriptions <- dmv_foods_combined %>%
filter(exclude != "y") %>%
distinct(recipient_name, disbursement_description) %>%
inner_join(exclusions, by = "recipient_name") %>%
mutate(exclude = case_when(is.na(exclude) ~ "n", TRUE ~ exclude))
names_and_descriptions <- dmv_foods_combined %>%
distinct(recipient_name, disbursement_description) %>%
mutate(cleaned_names = recipient_name)
names_and_descriptions %>%
filter(exclude != "y") %>%
distinct(recipient_name, disbursement_description) %>%
inner_join(exclusions, by = "recipient_name") %>%
mutate(exclude = case_when(is.na(exclude) ~ "n", TRUE ~ exclude))
names_and_descriptions <- dmv_foods_combined %>%
#filter(exclude != "y") %>%
distinct(recipient_name, disbursement_description) %>%
inner_join(exclusions, by = "recipient_name") %>%
mutate(exclude = case_when(is.na(exclude) ~ "n", TRUE ~ exclude))
names_and_descriptions <- dmv_foods_combined %>%
#filter(exclude != "y") %>%
distinct(recipient_name, disbursement_description) %>%
inner_join(exclusions, by = "recipient_name") %>%
mutate(exclude = case_when(is.na(exclude) ~ "n", TRUE ~ exclude)) %>%
select(cleaned_names, disbursement_description, exclude)
names_and_descriptions <- dmv_foods_combined %>%
distinct(recipient_name, disbursement_description) %>%
mutate(cleaned_names = recipient_name)
dmv_foods_combined <- dmv_foods_combined %>%
mutate(exclude = case_when(is.na(exclude) ~ "n", TRUE ~ exclude))
dmv_foods_combined <- dmv_foods_combined %>%
filter(exclude != "y") %>%
group_by(cleaned_names, disbursement_description) %>%
mutate(new_exclude = exclude)
dmv_foods_combined %>%
distinct(disbursement_description)
View(dmv_foods_combined)
#removing exlcusions
dmv_foods_combined <- dmv_foods_combined %>%
filter(exclude != "y") %>%
group_by(cleaned_names, disbursement_description)
dmv_foods_combined <- dmv_foods_combined %>%
filter(exclude != "y") %>%
distinct(disbursement_description)
#establishing and trying out things for the loop
dmv_foods_combined <- tibble()
# Define a list of years
cycles <- c('1112', '1314', '1516','1718','1920','2122','2324')
# Create a for loop to execute functions
for (cycle in cycles) {
# need to build the path to the .txt file
path <- paste0("~/Downloads/data", cycle,".txt")
print(path)
dmv_food <- read_delim(path, delim = "|", col_names = column_names)
dmv_food_filtered <- dmv_food %>%
filter(recipient_state == "DC"| recipient_state == "MD" | recipient_state == "VA") %>%
filter(entity_type != "IND") %>%
mutate(zip_code = str_sub(zip_code, start=1L, end=5L)) %>%
mutate(disbursement_date=mdy(disbursement_date)) %>%
filter(str_detect(disbursement_description, str_c(search_terms, collapse = "|")))
dmv_foods_combined <- bind_rows(dmv_foods_combined, dmv_food_filtered)
}
# fix the dates that havent happened yet and I can do that by looking at the image number on FEC.
# FOR OPEN REFINE I WANT A LIST OF UNIQUE RESTURANTS.
#RETAIN HOW IT ORIGINALLY APPEARS AND THEN MAKE A COPY OF THE COLUMN.
write_csv(dmv_foods_combined, "data/dmv_foods_combined.csv")
#What are the entity types
dmv_foods_combined %>%
group_by(entity_type) %>%
count()
#ORG has the most with 208,760 transactions. Need to see what types of places make up that entity_type column.
dmv_foods_combined %>%
filter(entity_type == "ORG") %>%
group_by(recipient_name) %>%
summarize(total = sum(disbursement_amount)) %>%
arrange(desc(total))
#This is showing that not many of the top recipients in the ORG category are actual food establishments
#Creating a column of the recipients to be cleaned in Open Refine
distinct_columns <- dmv_foods_combined %>%
distinct(recipient_name) %>%
mutate(cleaned_names = recipient_name)
write_csv(distinct_columns, "data/distinct_columns.csv")
#reading back the cleaned district columns
district_cols_cleaned <- read_csv("data/recipient_names_cleaned.csv")
district_cols_cleaned %>%
group_by(cleaned_names) %>%
count() %>%
arrange(n)
#Methodology: brought back the cleaned district columns after standardizing and clustering in open refine. I put a Y in a "exclude" column because those recipient names are not related to food or food establishments. One method of getting rid of those names was doing that. Another is joining the district_cols_cleaned dataframe back to dmv_foods_combined and then filtering out everything that is not an ORG entity_type
#One thought I had would be to export the cleaned_nammes but put the disbursement_description next to it so we can see the reason for the transaction. I think this would help understand what was really used for a food expense and what was not. I commented out what I think the code should look like.
names_and_descriptions <- dmv_foods_combined %>%
distinct(recipient_name, disbursement_description) %>%
mutate(cleaned_names = recipient_name)
#group_by(recipient_name, disbursement_description) %>%
#select(recipient_name, disbursement_description)
#loading in exclusions
exclusions <- read_csv("data/cleaned_names_attempt_2.csv")
exclusions <- exclusions %>%
select(-Notes)
view(exclusions)
dmv_foods_combined <- dmv_foods_combined %>%
inner_join(exclusions, by = "recipient_name")
dmv_foods_combined <- dmv_foods_combined %>%
mutate(exclude = case_when(is.na(exclude) ~ "n", TRUE ~ exclude))
dmv_foods_combined %>%
filter(exclude != "y") %>%
distinct(cleaned_names)
record_to_keep <- dmv_foods_combined %>%
filter(exclude != "y")
View(record_to_keep)
record_to_keep <- dmv_foods_combined %>%
filter(exclude != "y")
View(record_to_keep)
round2_exclusion <- dmv_foods_combined %>%
filter(exclude != "y") %>%
distinct(cleaned_names, disbursement_description, exclude)
View(round2_exclusion)
round2_exclusion <- dmv_foods_combined %>%
filter(exclude != "y") %>%
distinct(cleaned_names, disbursement_description, exclude) %>%
select(cleaned_names, disbursement_description, exclude)
round2_exclusion <- round2_exclusion %>%
mutate(disbursement_exclusion = NA)
round2_exclusion %>%
mutate(disbursement_exclusion(case_when(disbursement_description, "Keep") ~ "TRAVEL & FOOD & BEVERAGE - S. MUNISTERI", TRUE ~ disbursement_description))
round2_exclusion %>%
mutate(disbursement_exclusion = case_when(disbursement_description, "Keep") ~ "TRAVEL & FOOD & BEVERAGE - S. MUNISTERI", TRUE ~ disbursement_description))
round2_exclusion %>%
mutate(disbursement_exclusion = case_when(disbursement_description, "Keep") ~ "TRAVEL & FOOD & BEVERAGE - S. MUNISTERI", TRUE ~ disbursement_description)
round2_exclusion %>%
mutate(disbursement_description = case_when(disbursement_exclusion, "Keep") ~ "TRAVEL & FOOD & BEVERAGE - S. MUNISTERI", TRUE ~ disbursement_description)
round2_exclusion %>%
mutate(disbursement_exclusion = case_when(
str_detect(disbursement_description, "TRAVEL & FOOD & BEVERAGE - S. MUNISTERI") ~ "Yes",
TRUE ~ disbursement_description))
round2_exclusion <- round2_exclusion %>%
mutate(disbursement_exclusion = NA)
round2_exclusion %>%
mutate(disbursement_exclude = case_when(
disbursement_description == "TRAVEL & FOOD & BEVERAGE - S. MUNISTERI" ~ "Y",
TRUE ~ NA_character_
))
round2_exclusion %>%
mutate(disbursement_exclusion = case_when(
disbursement_description == "TRAVEL & FOOD & BEVERAGE - S. MUNISTERI" ~ "Y",
TRUE ~ NA_character_
))
dmv_foods_combined <- dmv_foods_combined %>%
mutate(exclude_rd1 = case_when(is.na(exclude) ~ "n", TRUE ~ exclude))
#removing exlcusions
round2_exclusion <- dmv_foods_combined %>%
filter(exclude_rd1 != "y") %>%
distinct(cleaned_names, disbursement_description, exclude_rd1) %>%
select(cleaned_names, disbursement_description, exclude_rd1)
round2_exclusion <- round2_exclusion %>%
mutate(disbursement_exclusion = NA)
round2_exclusion %>%
mutate(disbursement_exclusion = case_when(
disbursement_description == "",
disbursement_description == "",
TRUE ~ NA_character_
))
rm(lsit="record_to_keep")
#working on exclusions based on disbursement_discription
#this populates a column called disbursement_exclusion with
round2_exclusion %>%
mutate(disbursement_exclusion = case_when(
disbursement_description == "TRAVEL & FOOD & BEVERAGE - S. MUNISTERI" ~ "y",
TRUE ~ NA_character_
))
#working on exclusions based on disbursement_discription
#this populates a column called disbursement_exclusion with
round2_exclusion %>%
mutate(disbursement_exclusion = case_when(
disbursement_description == "EVENT SUPPLIES" ~ "y",
#disbursement_description == "" ~ "y",
TRUE ~ NA_character_
))
knitr::opts_chunk$set(echo = TRUE)
#working on exclusions based on disbursement_discription
#this populates a column called disbursement_exclusion with
round2_exclusion %>%
mutate(disbursement_exclusion = case_when(
disbursement_description == "EVENT SUPPLIES" ~ "y",
disbursement_description == "FUNDRAISING EVENT" ~ "y",
disbursement_description == "FUNDRAISING EVENT MANAGEMENT FEE & EXPENSES" ~ "y",
cleaned_names == "RED TOP CAB" ~ "y",
disbursement_description == "EVENT REGISTRATION FEES - NOT FOR A FEDERAL CANDIDATE" ~ "y",
disbursement_description == "CAMPAIGN EVENT: FACILITY RENTAL" ~ "y",
cleaned_names == " THE TOWNSEND GROUP" ~ "y",
TRUE ~ NA_character_
))
#libraries
library(tidyverse)
library(tidycensus)
library(janitor)
library(lubridate)
#install.packages("ipumsr")
library(ipumsr)
#working on exclusions based on disbursement_discription
#this populates a column called disbursement_exclusion with
round2_exclusion %>%
mutate(disbursement_exclusion = case_when(
disbursement_description == "EVENT SUPPLIES" ~ "y",
disbursement_description == "FUNDRAISING EVENT" ~ "y",
disbursement_description == "FUNDRAISING EVENT MANAGEMENT FEE & EXPENSES" ~ "y",
cleaned_names == "RED TOP CAB" ~ "y",
disbursement_description == "EVENT REGISTRATION FEES - NOT FOR A FEDERAL CANDIDATE" ~ "y",
disbursement_description == "CAMPAIGN EVENT: FACILITY RENTAL" ~ "y",
cleaned_names == " THE TOWNSEND GROUP" ~ "y",
TRUE ~ NA_character_
))
view(round2_exclusion)
#working on exclusions based on disbursement_discription
#this populates a column called disbursement_exclusion with
round2_exclusion %>%
mutate(disbursement_exclusion = case_when(
disbursement_description == "EVENT SUPPLIES" ~ "y",
disbursement_description == "FUNDRAISING EVENT" ~ "y",
disbursement_description == "FUNDRAISING EVENT MANAGEMENT FEE & EXPENSES" ~ "y",
cleaned_names == "RED TOP CAB" ~ "y",
disbursement_description == "EVENT REGISTRATION FEES - NOT FOR A FEDERAL CANDIDATE" ~ "y",
disbursement_description == "CAMPAIGN EVENT: FACILITY RENTAL" ~ "y",
cleaned_names == " THE TOWNSEND GROUP" ~ "y",
TRUE ~ NA_character_
))
View(round2_exclusion)
#working on exclusions based on disbursement_discription
#this populates a column called disbursement_exclusion with
round2_exclusion %>%
mutate(disbursement_exclusion = case_when(
disbursement_description == "EVENT SUPPLIES" ~ "y",
disbursement_description == "FUNDRAISING EVENT" ~ "y",
disbursement_description == "FUNDRAISING EVENT MANAGEMENT FEE & EXPENSES" ~ "y",
cleaned_names == "RED TOP CAB" ~ "y",
disbursement_description == "EVENT REGISTRATION FEES - NOT FOR A FEDERAL CANDIDATE" ~ "y",
disbursement_description == "CAMPAIGN EVENT: FACILITY RENTAL" ~ "y",
cleaned_names == "THE TOWNSEND GROUP" ~ "y",
cleaned_names == "VERONA CITGO 0001295" ~ "y",
TRUE ~ NA_character_
))
#working on exclusions based on disbursement_discription
#this populates a column called disbursement_exclusion with
round2_exclusion %>%
mutate(disbursement_exclusion = case_when(
disbursement_description == "EVENT SUPPLIES" ~ "y",
disbursement_description == "FUNDRAISING EVENT" ~ "y",
disbursement_description == "FUNDRAISING EVENT MANAGEMENT FEE & EXPENSES" ~ "y",
cleaned_names == "RED TOP CAB" ~ "y",
disbursement_description == "EVENT REGISTRATION FEES - NOT FOR A FEDERAL CANDIDATE" ~ "y",
disbursement_description == "CAMPAIGN EVENT: FACILITY RENTAL" ~ "y",
cleaned_names == "THE TOWNSEND GROUP" ~ "y",
cleaned_names == "VERONA CITGO 0001295" ~ "y",
TRUE ~ NA_character_
))
#working on exclusions based on disbursement_discription
#this populates a column called disbursement_exclusion with
round2_exclusion %>%
mutate(disbursement_exclusion = case_when(
disbursement_description == "EVENT SUPPLIES" ~ "y",
disbursement_description == "FUNDRAISING EVENT" ~ "y",
disbursement_description == "FUNDRAISING EVENT MANAGEMENT FEE & EXPENSES" ~ "y",
cleaned_names == "RED TOP CAB" ~ "y",
disbursement_description == "EVENT REGISTRATION FEES - NOT FOR A FEDERAL CANDIDATE" ~ "y",
disbursement_description == "CAMPAIGN EVENT: FACILITY RENTAL" ~ "y",
cleaned_names == "THE TOWNSEND GROUP" ~ "y",
cleaned_names == "VERONA CITGO 0001295" ~ "y",
cleaned_names == "WINDOWS CATERING COMPANY, INC." ~ "y",
disbursement_description == "CATERING & ROOM RENTAL" ~ "y",
disbursement_description == "FOOD FOR GOLF EVENT" ~ "y",
disbursement_description == "EVENTS-SITE SUPPLIES" ~ "y",
disbursement_description == "PAC ROOM RENTAL/EVENT SPACE" ~ "y",
disbursement_description == "ROOM RENTAL & CATERING FOR DONOR MEETING" ~ "y",
cleaned_names == "SUN TRUST BANK" ~ "y",
disbursement_description == "EVENT ENTERTAINMENT" ~ "y",
disbursement_description == "FC EVENT FACILITY & CATERING FEE" ~ "y",
disbursement_description == "JFC EVENT FACILITY FEE" ~ "y",
disbursement_description == "JFC EVENT SUPPLIES" ~ "y",
disbursement_description == "DEPOSIT FOR SPRING BALL EVENT TO BE HELD 5/12/12" ~ "y",
cleaned_names == "AVIS RENT A CAR" ~ "y",
cleaned_names == "SUPERSHUTTLE EXECUCA" ~ "y",
cleaned_names == "WINDOWS CATERING COMPANY, INC." ~ "y",
cleaned_names == "ADVANTAGE" ~ "y",
cleaned_names == "THE GROVE 1 AVIATION" ~ "y",
disbursement_description == "PAC CIGARS FOR EVENT" ~ "y",
disbursement_description == "BANQUET CHARGES FOR EVENT" ~ "y",
disbursement_description == "INVOICE FR EVENT" ~ "y",
disbursement_description == "PAC EVENT TICKET" ~ "y",
TRUE ~ NA_character_
))
round2_exclusion %>%
distinct(disbursement_description)
#working on exclusions based on disbursement_discription
#this populates a column called disbursement_exclusion with
round2_exclusion %>%
distinct(disbursement_description) %>%
mutate(disbursement_exclusion = case_when(
disbursement_description == "EVENT SUPPLIES" ~ "y",
disbursement_description == "FUNDRAISING EVENT" ~ "y",
disbursement_description == "FUNDRAISING EVENT MANAGEMENT FEE & EXPENSES" ~ "y",
cleaned_names == "RED TOP CAB" ~ "y",
disbursement_description == "EVENT REGISTRATION FEES - NOT FOR A FEDERAL CANDIDATE" ~ "y",
disbursement_description == "CAMPAIGN EVENT: FACILITY RENTAL" ~ "y",
cleaned_names == "THE TOWNSEND GROUP" ~ "y",
cleaned_names == "VERONA CITGO 0001295" ~ "y",
cleaned_names == "WINDOWS CATERING COMPANY, INC." ~ "y",
disbursement_description == "CATERING & ROOM RENTAL" ~ "y",
disbursement_description == "FOOD FOR GOLF EVENT" ~ "y",
disbursement_description == "EVENTS-SITE SUPPLIES" ~ "y",
disbursement_description == "PAC ROOM RENTAL/EVENT SPACE" ~ "y",
disbursement_description == "ROOM RENTAL & CATERING FOR DONOR MEETING" ~ "y",
cleaned_names == "SUN TRUST BANK" ~ "y",
disbursement_description == "EVENT ENTERTAINMENT" ~ "y",
disbursement_description == "FC EVENT FACILITY & CATERING FEE" ~ "y",
disbursement_description == "JFC EVENT FACILITY FEE" ~ "y",
disbursement_description == "JFC EVENT SUPPLIES" ~ "y",
disbursement_description == "DEPOSIT FOR SPRING BALL EVENT TO BE HELD 5/12/12" ~ "y",
cleaned_names == "AVIS RENT A CAR" ~ "y",
cleaned_names == "SUPERSHUTTLE EXECUCA" ~ "y",
cleaned_names == "WINDOWS CATERING COMPANY, INC." ~ "y",
cleaned_names == "ADVANTAGE" ~ "y",
cleaned_names == "THE GROVE 1 AVIATION" ~ "y",
disbursement_description == "PAC CIGARS FOR EVENT" ~ "y",
disbursement_description == "BANQUET CHARGES FOR EVENT" ~ "y",
disbursement_description == "INVOICE FR EVENT" ~ "y",
disbursement_description == "PAC EVENT TICKET" ~ "y",
cleaned_names == "THE ASHMEAD GROUP" ~ "y",
disbursement_description == "MBEPAC EVENT EXPENSE" ~ "y",
disbursement_description == "PAC PRINTING/TECHNOLOGY/FOOD&BEV./COLLATERAL" ~ "y",
disbursement_description == "2011 JULY EVENT" ~ "y",
disbursement_description == "CAMPAIGN EVENT: ROOM DEPOSIT" ~ "y",
TRUE ~ NA_character_
))
